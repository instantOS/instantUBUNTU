#!/usr/bin/bash

# this is a simple config for herbstluftwm

hc() {
    herbstclient "$@"
}

hc emit_hook reload

# remove all existing keybindings
hc keyunbind --all

# keybindings
# if you have a super key you will be much happier with Mod set to Mod4
# Mod=Mod1    # Use alt as the main modifier
Mod=Mod4   # Use the super key as the main modifier
TERMINAL=st
BROWSER=firefox

hc keybind $Mod-Shift-q quit
hc keybind $Mod-Shift-r reload
hc keybind $Mod-q close
hc keybind $Mod-Return spawn ${TERMINAL:-xterm} # use your $TERMINAL with xterm as fallback
hc keybind $Mod-Shift-Return spawn ${BROWSER:-firefox} # use your $TERMINAL with xterm as fallback
hc keybind $Mod-x spawn xmenu.sh
hc keybind $Mod-d spawn xmenu.sh launchpad
hc keybind $Mod-r spawn rofi -show drun -modi drun,run
hc keybind XF86LaunchA spawn rofi -show window
hc keybind XF86AudioMute and . spawn amixer -D pulse sset Master 0% . spawn xmenu.sh notify_volume
hc keybind XF86AudioLowerVolume and . spawn amixer -q -D pulse sset Master "1%-" . spawn xmenu.sh notify_volume
hc keybind XF86AudioRaiseVolume and . spawn amixer -q -D pulse sset Master "1%+" . spawn xmenu.sh notify_volume

# basic movement
# focusing clients
hc keybind $Mod-Left  focus left
hc keybind $Mod-Down  focus down
hc keybind $Mod-Up    focus up
hc keybind $Mod-Right focus rightrofi
hc keybind $Mod-h     focus left
hc keybind $Mod-j     focus down
hc keybind $Mod-k     focus up
hc keybind $Mod-l     focus right

# moving clients
hc keybind $Mod-Shift-Left  shift left
hc keybind $Mod-Shift-Down  shift down
hc keybind $Mod-Shift-Up    shift up
hc keybind $Mod-Shift-Right shift right
hc keybind $Mod-Shift-h     shift left
hc keybind $Mod-Shift-j     shift down
hc keybind $Mod-Shift-k     shift up
hc keybind $Mod-Shift-l     shift right

# splitting frames
# create an empty frame at the specified direction
hc keybind $Mod-s       split   bottom  0.5
hc keybind $Mod-Shift-s split   top  0.5
hc keybind $Mod-v       split   right   0.5
hc keybind $Mod-Shift-v split   left   0.5
# let the current frame explode into subframes
hc keybind $Mod-Alt-space split explode

# resizing xtermframes
resizestep=0.05
hc keybind $Mod-Control-h       resize left +$resizestep
hc keybind $Mod-Control-j       resize down +$resizestep
hc keybind $Mod-Control-k       resize up +$resizestep
hc keybind $Mod-Control-l       resize right +$resizestep
hc keybind $Mod-Control-Left    resize left +$resizestep
hc keybind $Mod-Control-Down    resize down +$resizestep
hc keybind $Mod-Control-Up      resize up +$resizestep
hc keybind $Mod-Control-Right   resize right +$resizestep

# tags
tag_names=( {1..3} )
tag_keys=( {1..3} 0 )

hc rename default "${tag_names[0]}" || true
for i in ${!tag_names[@]} ; do
    hc add "${tag_names[$i]}"
    key="${tag_keys[$i]}"
    if ! [ -z "$key" ] ; then
        hc keybind "$Mod-$key" use_index "$i"
        hc keybind "$Mod-Shift-$key" move_index "$i"
    fi
done

# cycle through tags
hc keybind $Mod-period use_index +1 --skip-visible
hc keybind $Mod-comma  use_index -1 --skip-visible

# layouting}
hc keybind $Mod-w remove
hc keybind $Mod-f fullscreen toggle
hc keybind $Mod-z floating toggle
hc keybind $Mod-p pseudotile toggle
# The following cycles through the available layouts within a frame, but skips
# layouts, if the layout change wouldn't affect the actual window positions.
# I.e. if there are two windows within a frame, the grid layout is skipped.
hc keybind $Mod-space \
            or , and . compare tags.focus.curframe_wcount = 2                   \
                     . cycle_layout +1 vertical horizontal max vertical grid    \
               , cycle_layout +1

# only for floating mode and focused windows
hc mouseunbind --all
hc mousebind $Mod-Button1 move
hc mousebind $Mod-Button2 zoom
hc mousebind $Mod-Button3 resize
hc mousebind Button2 call spawn xmenu.sh

# focus
hc keybind $Mod-BackSpace   cycle_monitor
hc keybind $Mod-Tab         cycle_all +1
hc keybind $Mod-Shift-Tab   cycle_all -1
hc keybind $Mod-c cycle
hc keybind $Mod-i jumpto urgent
hc keybind $Mod-Shift-f set always_show_frame 1

# theme
hc attr theme.tiling.reset 1
hc attr theme.floating.reset 1
hc attr theme.border_width 10
hc attr theme.active.color '#336dff'
hc attr theme.normal.color '#454545'
hc attr theme.urgent.color orange
hc attr theme.inner_width 2
hc attr theme.inner_color black
hc attr theme.floating.border_width 4
hc attr theme.floating.outer_width 1
hc attr theme.floating.outer_color black
hc attr theme.active.inner_color '#3E4A00'
hc attr theme.active.outer_color '#3E4A00'
hc attr theme.background_color '#141414'

hc set frame_border_active_color '#565656'
hc set frame_border_normal_color '#565656'
hc set frame_border_width 1
hc set frame_transparent_width 5
hc set frame_gap 10
hc set frame_padding 0
hc set always_show_frame 0
hc set frame_bg_transparent 1
hc set frame_bg_normal_color '#565656'
hc set frame_bg_active_color '#336dff'

hc set focus_follows_mouse 0

hc set window_gap 0
hc set smart_window_surroundings 0
hc set smart_frame_surroundings 1
hc set mouse_recenter_gap 0
hc set default_frame_layout 2 # 2 - max

# rules
hc unrule -F
#hc rule class=XTerm tag=3 # move all xterms to tag 3
hc rule focus=on # normally focus new clients (on/off)
# give focus to most common terminals
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' pseudotile=on
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off

hc set tree_style '╾│ ├└╼─┐'

# unlock, just to be sure
hc unlock

# do multi monitor setup here, e.g.:
# hc set_monitors 1280x1024+0+0 1280x1024+1280+0
# or simply:
# hc detect_monitors

# # find the panel
# panel=~/.config/herbstluftwm/panel.sh
# [ -x "$panel" ] || panel=/etc/xdg/herbstluftwm/panel.sh
# for monitor in $(herbstclient list_monitors | cut -d: -f1) ; do
#     # start it on each monitor
#     "$panel" $monitor &
# done

# extra features - $Mod-a switch to last window focused
# run the initialization
init_focuslastwindow=(
  chain
    # quit existing instances of loop below
    , emit_hook quit_focuslastwindow
    # if the key is pressed
    , keybind $Mod-a
        # read the content of the my_lastwin attribute
        substitute LASTWIN my_lastwin
            # and jump there
            jumpto LASTWIN
    # create necessary attributes, but do not fail if they already exist
    , silent try new_attr string my_lastwin
    , silent try new_attr string my_curwin
    # fill them with the current window id
    , and ,, silent attr clients.focus
          ,, substitute WIN clients.focus.winid set_attr my_curwin WIN
          ,, substitute WIN clients.focus.winid set_attr my_lastwin WIN
)
herbstclient "${init_focuslastwindow[@]}"
herbstclient -i '(focus_changed|reload|quit_focuslastwindow)' | \
    while read h winid t ; do
        case "$h" in
            focus_changed)
                # never feed an 'unfocused' state into the queue
                # if a window is focused, shift the content of my_curwin into
                # my_lastwin. Note that we use $winid here and not the content
                # of clients.focus.winid in order to avoid race conditions.
                [[ "$winid" != "0x0" ]] && \
                herbstclient and \
                    , substitute WIN my_curwin set_attr my_lastwin WIN \
                    , set_attr my_curwin "$winid"
                ;;
            *)  # on any other hook, quit this loop. Note that the idling
                # herbstclient still lives until the next time a hook arrives
                # and then quits because it can not write to stdout anymore
                break ;;
        esac
    done

